<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\crud\models\base;

use Yii;

/**
 * This is the base-model class for table "icsr_event".
 *
 * @property integer $id
 * @property integer $icsr_id
 * @property string $event_description
 * @property string $event_type
 * @property integer $meddra_llt_id
 * @property integer $meddra_pt_id
 * @property string $event_date
 *
 * @property \backend\modules\crud\models\Icsr $icsr
 * @property \backend\modules\crud\models\LkpMeddraLlt $meddraLlt
 * @property \backend\modules\crud\models\LkpMeddraPt $meddraPt
 * @property string $aliasModel
 */
abstract class IcsrEvent extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const EVENT_TYPE_PROBLEM = 'problem';
    const EVENT_TYPE_EVENT = 'event';
    const EVENT_TYPE_USER_CASE_ERR = 'user_case_err';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'icsr_event';
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('app', 'IcsrEvents');
        }else{
            return Yii::t('app', 'IcsrEvent');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[ 'icsr_id', 'meddra_llt_id', 'meddra_pt_id'], 'required'],
            [['id', 'icsr_id', 'meddra_llt_id', 'meddra_pt_id'], 'integer'],
            [['event_type'], 'string'],
            [['event_date'], 'safe'],
            [['event_description'], 'string', 'max' => 512],
            [['icsr_id'], 'exist', 'skipOnError' => true, 'targetClass' => Icsr::className(), 'targetAttribute' => ['icsr_id' => 'id']],
            [['meddra_llt_id'], 'exist', 'skipOnError' => true, 'targetClass' => LkpMeddraLlt::className(), 'targetAttribute' => ['meddra_llt_id' => 'id']],
            [['meddra_pt_id'], 'exist', 'skipOnError' => true, 'targetClass' => LkpMeddraPt::className(), 'targetAttribute' => ['meddra_pt_id' => 'id']],
            ['event_type', 'in', 'range' => [
                    self::EVENT_TYPE_PROBLEM,
                    self::EVENT_TYPE_EVENT,
                    self::EVENT_TYPE_USER_CASE_ERR,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'icsr_id' => Yii::t('app', 'Icsr ID'),
            'event_description' => Yii::t('app', 'Event Description'),
            'event_type' => Yii::t('app', 'Event Type'),
            'meddra_llt_id' => Yii::t('app', 'Meddra LLT ID'),
            'meddra_pt_id' => Yii::t('app', 'Meddra PT ID'),
            'event_date' => Yii::t('app', 'Event Date'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(
            parent::attributeHints(),
            [
            'id' => Yii::t('app', 'ID'),
            'icsr_id' => Yii::t('app', 'Icsr Id'),
            'event_description' => Yii::t('app', 'B.2.i.0 Reaction or event as reported by the primary source'),
            'event_type' => Yii::t('app', 'Event Type'),
            'meddra_llt_id' => Yii::t('app', 'Reaction or event in MedDRA terminology (Lowest Level Term)'),
            'meddra_pt_id' => Yii::t('app', 'Reaction or event in MedDRA terminology (Preferred Term)'),
            'event_date' => Yii::t('app', 'Date of start of reaction or event'),
            ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIcsr()
    {
        return $this->hasOne(\backend\modules\crud\models\Icsr::className(), ['id' => 'icsr_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMeddraLlt()
    {
        return $this->hasOne(\backend\modules\crud\models\LkpMeddraLlt::className(), ['id' => 'meddra_llt_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMeddraPt()
    {
        return $this->hasOne(\backend\modules\crud\models\LkpMeddraPt::className(), ['id' => 'meddra_pt_id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\modules\crud\models\query\IcsrEventQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\crud\models\query\IcsrEventQuery(get_called_class());
    }


    /**
     * get column event_type enum value label
     * @param string $value
     * @return string
     */
    public static function getEventTypeValueLabel($value){
        $labels = self::optsEventType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column event_type ENUM value labels
     * @return array
     */
    public static function optsEventType()
    {
        return [
            self::EVENT_TYPE_PROBLEM => Yii::t('app', self::EVENT_TYPE_PROBLEM),
            self::EVENT_TYPE_EVENT => Yii::t('app', self::EVENT_TYPE_EVENT),
            self::EVENT_TYPE_USER_CASE_ERR => Yii::t('app', self::EVENT_TYPE_USER_CASE_ERR),
        ];
    }

}
