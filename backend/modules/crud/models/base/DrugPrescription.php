<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\crud\models\base;

use Yii;

/**
 * This is the base-model class for table "drug_prescription".
 *
 * @property integer $id
 * @property integer $drug_id
 * @property integer $icsr_id
 * @property string $dose
 * @property integer $frequency_lkp_id
 * @property string $expiration_date
 * @property string $lot_no
 * @property string $ndc
 * @property string $use_date_start
 * @property string $use_date_end
 * @property string $duration_of_use
 * @property string $duration_of_use_unit
 * @property string $reason_of_use
 * @property string $problem_went_after_stop
 * @property string $problem_returned_after_reuse
 * @property string $product_avilable
 *
 * @property \backend\modules\crud\models\Drug $drug
 * @property \backend\modules\crud\models\Icsr $icsr
 * @property \backend\modules\crud\models\LkpFrequency $frequencyLkp
 * @property string $aliasModel
 */
abstract class DrugPrescription extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const DURATION_OF_USE_UNIT_DAY = 'day';
    const DURATION_OF_USE_UNIT_WEEK = 'week';
    const DURATION_OF_USE_UNIT_MONTH = 'month';
    const PROBLEM_WENT_AFTER_STOP_YES = 'yes';
    const PROBLEM_WENT_AFTER_STOP_NO = 'no';
    const PROBLEM_RETURNED_AFTER_REUSE_YES = 'yes';
    const PROBLEM_RETURNED_AFTER_REUSE_NO = 'no';
    const PRODUCT_AVILABLE_YES = 'yes';
    const PRODUCT_AVILABLE_NO = 'no';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'drug_prescription';
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('app', 'DrugPrescriptions');
        }else{
            return Yii::t('app', 'DrugPrescription');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[   'icsr_id'], 'required'],
            [['id', 'drug_id', 'icsr_id', 'frequency_lkp_id'], 'integer'],
            [['expiration_date', 'use_date_start', 'use_date_end'], 'safe'],
            [['duration_of_use'], 'number'],
            [['duration_of_use_unit', 'problem_went_after_stop', 'problem_returned_after_reuse', 'product_avilable'], 'string'],
            [['dose', 'lot_no', 'ndc'], 'string', 'max' => 45],
            [['reason_of_use'], 'string', 'max' => 60],
            [['drug_id'], 'exist', 'skipOnError' => true, 'targetClass' => Drug::className(), 'targetAttribute' => ['drug_id' => 'id']],
            [['icsr_id'], 'exist', 'skipOnError' => true, 'targetClass' => Icsr::className(), 'targetAttribute' => ['icsr_id' => 'id']],
            [['frequency_lkp_id'], 'exist', 'skipOnError' => true, 'targetClass' => LkpFrequency::className(), 'targetAttribute' => ['frequency_lkp_id' => 'id']],
            ['duration_of_use_unit', 'in', 'range' => [
                    self::DURATION_OF_USE_UNIT_DAY,
                    self::DURATION_OF_USE_UNIT_WEEK,
                    self::DURATION_OF_USE_UNIT_MONTH,
                ]
            ],
            ['problem_went_after_stop', 'in', 'range' => [
                    self::PROBLEM_WENT_AFTER_STOP_YES,
                    self::PROBLEM_WENT_AFTER_STOP_NO,
                ]
            ],
            ['problem_returned_after_reuse', 'in', 'range' => [
                    self::PROBLEM_RETURNED_AFTER_REUSE_YES,
                    self::PROBLEM_RETURNED_AFTER_REUSE_NO,
                ]
            ],
            ['product_avilable', 'in', 'range' => [
                    self::PRODUCT_AVILABLE_YES,
                    self::PRODUCT_AVILABLE_NO,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'drug_id' => Yii::t('app', 'Drug ID'),
            'icsr_id' => Yii::t('app', 'Icsr ID'),
            'dose' => Yii::t('app', 'Dose'),
            'frequency_lkp_id' => Yii::t('app', 'Frequency Lkp ID'),
            'expiration_date' => Yii::t('app', 'Expiration Date'),
            'lot_no' => Yii::t('app', 'Lot No'),
            'ndc' => Yii::t('app', 'Ndc'),
            'use_date_start' => Yii::t('app', 'Use Date Start'),
            'use_date_end' => Yii::t('app', 'Use Date End'),
            'duration_of_use' => Yii::t('app', 'Duration Of Use'),
            'duration_of_use_unit' => Yii::t('app', 'Duration Of Use Unit'),
            'reason_of_use' => Yii::t('app', 'Reason Of Use'),
            'problem_went_after_stop' => Yii::t('app', 'Problem Went After Stop'),
            'problem_returned_after_reuse' => Yii::t('app', 'Problem Returned After Reuse'),
            'product_avilable' => Yii::t('app', 'Product Avilable'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(
            parent::attributeHints(),
            [
            'id' => Yii::t('app', 'ID'),
            'drug_id' => Yii::t('app', 'Drug Id'),
            'icsr_id' => Yii::t('app', 'Icsr Id'),
            'dose' => Yii::t('app', 'Dose'),
            'frequency_lkp_id' => Yii::t('app', 'Frequency Lkp Id'),
            'expiration_date' => Yii::t('app', 'Expiration Date'),
            'lot_no' => Yii::t('app', 'Lot No'),
            'ndc' => Yii::t('app', 'Ndc'),
            'use_date_start' => Yii::t('app', 'Use Date Start'),
            'use_date_end' => Yii::t('app', 'Use Date End'),
            'duration_of_use' => Yii::t('app', 'Duration Of Use'),
            'duration_of_use_unit' => Yii::t('app', 'Duration Of Use Unit'),
            'reason_of_use' => Yii::t('app', 'Reason Of Use'),
            'problem_went_after_stop' => Yii::t('app', 'Problem Went After Stop'),
            'problem_returned_after_reuse' => Yii::t('app', 'Problem Returned After Reuse'),
            'product_avilable' => Yii::t('app', 'Product Avilable'),
            ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDrug()
    {
        return $this->hasOne(\backend\modules\crud\models\Drug::className(), ['id' => 'drug_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIcsr()
    {
        return $this->hasOne(\backend\modules\crud\models\Icsr::className(), ['id' => 'icsr_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFrequencyLkp()
    {
        return $this->hasOne(\backend\modules\crud\models\LkpFrequency::className(), ['id' => 'frequency_lkp_id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\modules\crud\models\query\DrugPrescriptionQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\crud\models\query\DrugPrescriptionQuery(get_called_class());
    }


    /**
     * get column duration_of_use_unit enum value label
     * @param string $value
     * @return string
     */
    public static function getDurationOfUseUnitValueLabel($value){
        $labels = self::optsDurationOfUseUnit();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column duration_of_use_unit ENUM value labels
     * @return array
     */
    public static function optsDurationOfUseUnit()
    {
        return [
            self::DURATION_OF_USE_UNIT_DAY => Yii::t('app', self::DURATION_OF_USE_UNIT_DAY),
            self::DURATION_OF_USE_UNIT_WEEK => Yii::t('app', self::DURATION_OF_USE_UNIT_WEEK),
            self::DURATION_OF_USE_UNIT_MONTH => Yii::t('app', self::DURATION_OF_USE_UNIT_MONTH),
        ];
    }

    /**
     * get column problem_went_after_stop enum value label
     * @param string $value
     * @return string
     */
    public static function getProblemWentAfterStopValueLabel($value){
        $labels = self::optsProblemWentAfterStop();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column problem_went_after_stop ENUM value labels
     * @return array
     */
    public static function optsProblemWentAfterStop()
    {
        return [
            self::PROBLEM_WENT_AFTER_STOP_YES => Yii::t('app', self::PROBLEM_WENT_AFTER_STOP_YES),
            self::PROBLEM_WENT_AFTER_STOP_NO => Yii::t('app', self::PROBLEM_WENT_AFTER_STOP_NO),
        ];
    }

    /**
     * get column problem_returned_after_reuse enum value label
     * @param string $value
     * @return string
     */
    public static function getProblemReturnedAfterReuseValueLabel($value){
        $labels = self::optsProblemReturnedAfterReuse();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column problem_returned_after_reuse ENUM value labels
     * @return array
     */
    public static function optsProblemReturnedAfterReuse()
    {
        return [
            self::PROBLEM_RETURNED_AFTER_REUSE_YES => Yii::t('app', self::PROBLEM_RETURNED_AFTER_REUSE_YES),
            self::PROBLEM_RETURNED_AFTER_REUSE_NO => Yii::t('app', self::PROBLEM_RETURNED_AFTER_REUSE_NO),
        ];
    }

    /**
     * get column product_avilable enum value label
     * @param string $value
     * @return string
     */
    public static function getProductAvilableValueLabel($value){
        $labels = self::optsProductAvilable();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column product_avilable ENUM value labels
     * @return array
     */
    public static function optsProductAvilable()
    {
        return [
            self::PRODUCT_AVILABLE_YES => Yii::t('app', self::PRODUCT_AVILABLE_YES),
            self::PRODUCT_AVILABLE_NO => Yii::t('app', self::PRODUCT_AVILABLE_NO),
        ];
    }

}
