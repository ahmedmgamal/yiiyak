<?php
/**
 * /var/www/html/yiiyak/console/runtime/giiant/358b0e44f1c1670b558e36588c267e47
 *
 * @package default
 */


// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\crud\controllers\base;

use backend\modules\crud\models\Company;
use backend\modules\crud\models\search\Company as CompanySearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use dmstr\bootstrap\Tabs;
use backend\modules\crud\models\User;
use Da\TwoFA\Service\TOTPSecretKeyUriGeneratorService;
use Da\TwoFA\Service\GoogleQrCodeUrlGeneratorService;
use Da\TwoFA\Manager;

/**
 * CompanyController implements the CRUD actions for Company model.
 */
class CompanyController extends Controller
{
	

	/**
	 *
	 * @var boolean whether to enable CSRF validation for the actions in this controller.
	 * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	 */
	public $enableCsrfValidation = false;
	

	public function qrcodeGooleAuth(){
		$user = \Yii::$app->user;
		$user = User::findIdentity($user->id);
		if($user->auth == 1)
			return '';

		$user = \Yii::$app->user;
		$user = User::findIdentity($user->id);
		$secret = $user->twofa_secret;


		$totpUri = (new TOTPSecretKeyUriGeneratorService('PVRADAR', $user->username, $secret))->run();
		$googleUri = (new GoogleQrCodeUrlGeneratorService($totpUri))->run();

		if(isset($_POST['qrcode']))
		{
			$manager = new Manager();
			$valid = $manager->verify($_POST['qrcode'], $user->twofa_secret);



			if($valid == false){
				//if entered invalid qrcode
				return $this->render('/qrcode', [
					'googleUri' => $googleUri,
					'secret' => $secret,
					'alert'=>'Your Verification Code is Wrong Please try again'
				]);

			}
			else{
				//if entered valid qrcode
				$user->auth = 1;
				$user->save();
				return '';

			}
		}



		return $this->render('/qrcode', [
			'googleUri' => $googleUri,
			'secret' => $secret,
		]);
	}




	/**
	 * Lists all Company models.
	 *
	 * @return mixed
	 */
	public function actionIndex() {



		if($this->qrcodeGooleAuth() != '' )
			return $this->qrcodeGooleAuth();

        $searchModel  = new CompanySearch;
		$dataProvider = $searchModel->search($_GET);

		Tabs::clearLocalStorage();

		Url::remember();
		\Yii::$app->session['__crudReturnUrl'] = null;

		return $this->render('index', [
				'dataProvider' => $dataProvider,
				'searchModel' => $searchModel,
			]);
	}


	/**
	 * Displays a single Company model.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionView($id) {

		if($this->qrcodeGooleAuth() != '' )
			return $this->qrcodeGooleAuth();

		\Yii::$app->session['__crudReturnUrl'] = Url::previous();
		Url::remember();
		Tabs::rememberActiveState();

		return $this->render('view', [
				'model' => $this->findModel($id),
			]);
	}


	/**
	 * Creates a new Company model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 *
	 * @return mixed
	 */
	public function actionCreate() {

		if($this->qrcodeGooleAuth() != '' )
			return $this->qrcodeGooleAuth();

		$model = new Company;
        $userModel = new User;

        $request = \Yii::$app->request;

        if ($request->isPost){
        $connection = \Yii::$app->db;
        $transaction = $connection->beginTransaction();
        }

		try {
			if ($model->load($_POST) && $model->save() && $userModel->load($_POST) ) {
			   $userModel->company_id = $model->id;
                if ($userModel->save()) {
                    $transaction->commit();
                    return $this->redirect(Url::previous());
                }
			} elseif (!\Yii::$app->request->isPost) {
				$model->load($_GET);
			}

		} catch (\Exception $e) {
		    $transaction->rollBack();
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			$model->addError('_exception', $msg);
		}
		return $this->render('create', ['model' => $model , 'userModel' => $userModel]);
	}


	/**
	 * Updates an existing Company model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionUpdate($id) {
		$model = $this->findModel($id);

		if ($model->load($_POST) && $model->save()) {
			return $this->redirect(Url::previous());
		} else {
			return $this->render('update', [
					'model' => $model,
				]);
		}
	}


	/**
	 * Deletes an existing Company model.
	 * If deletion is successful, the browser will be redirected to the 'index' page.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionDelete($id) {
		try {
			$this->findModel($id)->delete();
		} catch (\Exception $e) {
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			\Yii::$app->getSession()->addFlash('error', $msg);
			return $this->redirect(Url::previous());
		}


		// TODO: improve detection
		$isPivot = strstr('$id', ',');
		if ($isPivot == true) {
			return $this->redirect(Url::previous());
		} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
			Url::remember(null);
			$url = \Yii::$app->session['__crudReturnUrl'];
			\Yii::$app->session['__crudReturnUrl'] = null;

			return $this->redirect($url);
		} else {
			return $this->redirect(['index']);
		}
	}


	/**
	 * Finds the Company model based on its primary key value.
	 * If the model is not found, a 404 HTTP exception will be thrown.
	 *
	 * @throws HttpException if the model cannot be found
	 * @param integer $id
	 * @return Company the loaded model
	 */
	protected function findModel($id) {
		if (($model = Company::findOne($id)) !== null) {
			return $model;
		} else {
			throw new HttpException(404, 'The requested page does not exist.');
		}
	}


}
