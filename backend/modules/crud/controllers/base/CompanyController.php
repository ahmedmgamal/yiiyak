<?php
/**
 * /var/www/html/yiiyak/console/runtime/giiant/358b0e44f1c1670b558e36588c267e47
 *
 * @package default
 */


// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\crud\controllers\base;

use backend\modules\crud\controllers\IcsrController;
use backend\modules\crud\models\Company;
use backend\modules\crud\models\Drug;
use backend\modules\crud\models\Icsr;
use backend\modules\crud\models\search\Company as CompanySearch;
use Faker\Provider\cs_CZ\DateTime;
use FPDF;
use mPDF;
use Yii;
use yii\data\SqlDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use dmstr\bootstrap\Tabs;
use backend\modules\crud\models\User;

/**
 * CompanyController implements the CRUD actions for Company model.
 */
class CompanyController extends Controller
{

	/**
	 *
	 * @var boolean whether to enable CSRF validation for the actions in this controller.
	 * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	 */
	public $enableCsrfValidation = false;
    private $zipper = null;
    private $icsrsCount = 0;



	/**
	 * Lists all Company models.
	 *
	 * @return mixed
	 */
	public function actionIndex() {

        $searchModel  = new CompanySearch;
		$dataProvider = $searchModel->search($_GET);

		Tabs::clearLocalStorage();

		Url::remember();
		\Yii::$app->session['__crudReturnUrl'] = null;

		return $this->render('index', [
				'dataProvider' => $dataProvider,
				'searchModel' => $searchModel,
			]);
	}


	/**
	 * Displays a single Company model.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionView($id) {
		\Yii::$app->session['__crudReturnUrl'] = Url::previous();
		Url::remember();
		Tabs::rememberActiveState();

		return $this->render('view', [
				'model' => $this->findModel($id),
			]);
	}


	/**
	 * Creates a new Company model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 *
	 * @return mixed
	 */
	public function actionCreate() {
		$model = new Company;
        $userModel = new User;

        $request = \Yii::$app->request;

        if ($request->isPost){
        $connection = \Yii::$app->db;
        $transaction = $connection->beginTransaction();
        }

		try {
			if ($model->load($_POST) && $model->save() && $userModel->load($_POST) ) {
			   $userModel->company_id = $model->id;
                if ($userModel->save()) {
                    $transaction->commit();
                    return $this->redirect(Url::previous());
                }
			} elseif (!\Yii::$app->request->isPost) {
				$model->load($_GET);
			}

		} catch (\Exception $e) {
		    $transaction->rollBack();
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			$model->addError('_exception', $msg);
		}
		return $this->render('create', ['model' => $model , 'userModel' => $userModel]);
	}


	/**
	 * Updates an existing Company model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionUpdate($id) {
		$model = $this->findModel($id);

		if ($model->load($_POST) && $model->save()) {
			return $this->redirect(Url::previous());
		} else {
			return $this->render('update', [
					'model' => $model,
				]);
		}
	}


	/**
	 * Deletes an existing Company model.
	 * If deletion is successful, the browser will be redirected to the 'index' page.
	 *
	 * @param integer $id
	 * @return mixed
	 */
	public function actionDelete($id) {
		try {
			$this->findModel($id)->delete();
		} catch (\Exception $e) {
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			\Yii::$app->getSession()->addFlash('error', $msg);
			return $this->redirect(Url::previous());
		}


		// TODO: improve detection
		$isPivot = strstr('$id', ',');
		if ($isPivot == true) {
			return $this->redirect(Url::previous());
		} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
			Url::remember(null);
			$url = \Yii::$app->session['__crudReturnUrl'];
			\Yii::$app->session['__crudReturnUrl'] = null;

			return $this->redirect($url);
		} else {
			return $this->redirect(['index']);
		}
	}


	/**
	 * Finds the Company model based on its primary key value.
	 * If the model is not found, a 404 HTTP exception will be thrown.
	 *
	 * @throws HttpException if the model cannot be found
	 * @param integer $id
	 * @return Company the loaded model
	 */
	protected function findModel($id) {
		if (($model = Company::findOne($id)) !== null) {
			return $model;
		} else {
			throw new HttpException(404, 'The requested page does not exist.');
		}
	}
	public function actionExportHistory(){
        $company = Yii::$app->user->identity->getCompany()->one();
        $tempDir = "files/";
        $archiveFileName = $company->name."_".strtotime("now").".zip";
        $path = $tempDir . $archiveFileName;
        $this->zipper = new \ZipArchive();
        $pdf =$this->generateCompanyPdf($company);
        $this->zipper->open($path,\ZipArchive::OVERWRITE);
        $this->zipper->addFromString("company.pdf",$pdf);
        $this->generateDrugIcsrXml($company->drugs);
        $this->zipper->close();
        $fileize = filesize($path);
        $fileUrl = $this->saveFullExportFile($archiveFileName,$path);
        $drugsCount = count($company->drugs);
        $this->saveExportHistory($fileUrl,$fileize,$drugsCount,$this->icsrsCount);
        unlink($path);
        return $this->redirect(['full-export']);
    }

	public function actionFullExport(){
        $company = Yii::$app->user->identity->getCompany()->one();
        return $this->render('fullexport',[
            'provider'=>$this->getExportHistoryProvider($company)
        ]);
    }
    private function generateCompanyPdf($company){

        $drugs = $company->drugs;
        $mpdf = new mPDF();
        $mpdf->simpleTables = true;
        $mpdf->Bookmark('Company');
        $companyHtml = $this->generateCompanyHtml($company);
        $drugsHtml = $this->generateDrugsHtml($drugs);
        $mpdf->WriteHTML($companyHtml);
        $mpdf->AddPage();
        $mpdf->Bookmark('Drugs');
        $mpdf->WriteHTML("<div><h2 style='text-align: center;'>Company Drugs</h2></div>");
        $mpdf->WriteHTML($drugsHtml);
        $mpdf->AddPage();
        return $mpdf->Output("company.pdf","S");
    }

    private function generateDrugIcsrXml($drugs){
        foreach ($drugs as $drug){
            $this->generateIcsrXml($drug);
        }
    }
    private function generateIcsrXml($drug){
        foreach ($drug->icsrs as $icsr){
            $this->icsrsCount += 1;
            $fileName = 'IcsrVersion_IcsrId'.$icsr->id.'_DrugId'.$drug->id.'_'.strtotime("now").'.xml';
            $this->zipper->addFromString($fileName,$this->getIcsrXml($icsr))  ;
        }
    }
    private function getIcsrXml($icsr){
        $this->layout = false;

        $xml = $this->renderPartial('export', [
            'model' => $icsr,
        ]);
        return $xml;
    }


    private function generateCompanyHtml($company){
        $companyDate = date_create($company->end_date);
	    $html = "<div>";
        $html .= "<div style='width: 100%;text-align: center;'><img src='{$company->license_image_url}' width='150px' height='150px' /></div>";
        $html .= "<h2><strong>Company Name:</strong> ".$company->name."</h2>";
        $html .= "<p><strong>Company Short Name:</strong> ".$company->name."</p>";
        $html .= "<p><strong>License No#:</strong> ".$company->license_no."</p>";
        $html .= "<p><strong>End Date:</strong> ".date_format($companyDate,'d-m-Y') ."</p>";
        $html .="<p><strong>Address:</strong> ".$company->adderess."</p>";
        return $html;
    }
    private function generateDrugsHtml($drugs){
        $html = "<div>";
        $html .= "<table style='border: 1px solid black;width:100%;border-collapse: collapse;'>";
        $html .= "<thead>";
        $html .= "<tr>";
        $html .= "<th style='border:1px solid black'>Generic Name</th>";
        $html .= "<th style='border:1px solid black'>Trade Name</th>";
        $html .= "<th style='border:1px solid black'>Dosage Form</th>";
        $html .= "<th style='border:1px solid black'>Strength</th>";
        $html .= "<th style='border:1px solid black'>Manufacturer</th>";
        $html .= "<th style='border:1px solid black'>Manufacturer</th>";
        $html .= "</tr>";
        $html .= "</thead>";
        $html .="<tbody>";
        foreach ($drugs as $drug){
            $html .= "<tr>";
            $html .= "<td style='border:1px solid black'>{$drug->generic_name}</td>";
            $html .= "<td style='border:1px solid black'>{$drug->trade_name}</td>";
            $html .= "<td style='border:1px solid black'>{$drug->composition}</td>";
            $html .= "<td style='border:1px solid black'>{$drug->strength}</td>";
            $html .= "<td style='border:1px solid black'>{$drug->manufacturer}</td>";
            $html .= "<td style='border:1px solid black'>{$drug->routeLkp->description}</td>";
            $html .= "</tr>";

        }
        $html .="</tbody>";
        $html .= "</table>";
        $html .= "</div>";
        return $html;
    }

    private function saveFullExportFile($filename,$path){
        $bucket = \Yii::$app->fileStorage->getBucket("icsrVersions");
        $file_content =  file_get_contents($path);
        $bucket->saveFileContent($filename,$file_content);
        return $bucket->getFileUrl($filename);
    }

    private function saveExportHistory($path,$filesize,$drugs,$icsrs){
        $userId = Yii::$app->user->identity->getId();
            $sql = "INSERT INTO exports_history(created_by,creation_date,file_size,drugs_number,icsrs_number,file_path)
                    VALUES (:createdBy,DATE(NOW()),:filesize,:drugCount,:icsrCount,:path)";
            Yii::$app->db->createCommand($sql,
                [
                    ":createdBy"=>$userId,
                    ":filesize"=>$filesize,
                    ":drugCount"=>$drugs,
                    "icsrCount"=>$icsrs,
                    "path"=>$path
                ]
            )->execute();
    }
    private function getExportHistoryProvider($company){

        $sql = "SELECT `user`.username AS 'username',creation_date,ROUND((file_size/1024),0) AS 'file_size',drugs_number,icsrs_number,file_path
                FROM exports_history
                 INNER JOIN `user`
                 ON(`user`.id = exports_history.created_by)
                 WHERE `user`.company_id = :company_id
                 ORDER BY creation_date ASC";
        $CountSql = "SELECT COUNT(*)
                FROM exports_history
                 INNER JOIN `user`
                 ON(`user`.id = exports_history.created_by)
                 WHERE `user`.company_id = :company_id";
        $count = Yii::$app->db->createCommand($CountSql,  [":company_id"=> $company->id])->queryScalar();
        $provider = new SqlDataProvider([
            'sql' => $sql,
            'params' => [':company_id' => $company->id],
            'totalCount' => $count,
            'pagination' => [
                'pageSize' => 10,
            ],
            'sort' => [
                'attributes' => [
                    'username',
                    'icsrs_number',
                    'drugs_number',
                    'creation_date'
                ],
            ],
        ]);
        return $provider;
    }


}
