<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\crud\controllers\base;

use backend\modules\crud\models\PsmfCompany;
use backend\modules\crud\models\PsmfSection;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use yii\web\UploadedFile;

/**
* PsmfSectionController implements the CRUD actions for PsmfSection model.
*/
class PsmfSectionController extends Controller
{
/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;


/**
* Lists all PsmfSection models.
* @return mixed
*/
public function actionIndex()
{

    $dataProvider = new ActiveDataProvider([
    'query' => PsmfCompany::find()->where(['company_id' => \Yii::$app->user->identity->company->id]),
    ]);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
]);
}

/**
* Displays a single PsmfSection model.
* @param integer $id
*
* @return mixed
*/
public function actionView($id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

return $this->render('view', [
'model' => $this->findModel($id),
]);
}

/**
* Creates a new PsmfSection model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
    public function actionCreate()
    {
        $model = new PsmfSection;

        $request = \Yii::$app->request;

        try {
            if ($request->isPost){
                $connection = \Yii::$app->db;
                $transaction = $connection->beginTransaction();

                $psmfCompany = $this->getNewPsmfCompanyRow();

                if (!isset($psmfCompany->psmf_id))
                {
                    $transaction->rollBack();
                    \Yii::$app->getSession()->setFlash('error', \Yii::t('app',"some thing went wrong please try again later"));
                    return $this->redirect(['create']);
                }


                foreach ($_POST['PsmfSection']['section_name'] as $key => $value)
                {
                    $PsmfModel = new PsmfSection;
                    $PsmfModel->psmf_id = $psmfCompany->psmf_id;
                    $PsmfModel->section_name = $value;
                    $PsmfModel->section_content = $_POST['PsmfSection']['section_content'][$key];

                    if (!$PsmfModel->save())
                    {
                        $transaction->rollBack();
                        \Yii::$app->getSession()->setFlash('error', \Yii::t('app',"Please Fill All Section Name And Section Content"));
                        return $this->redirect(['create']);
                    }

                }
                if (isset($_POST['PsmfSection']['imageFiles']))
                {
                    if (!$this->uploadImages($model,$psmfCompany))
                    {
                        $transaction->rollBack();
                        \Yii::$app->getSession()->setFlash('error', \Yii::t('app',"Image Files Can't Be Saved Try Again Later"));
                        return $this->redirect(['create']);
                    }

                    $model->save();
                }

                $transaction->commit();
                $this->exportHtmlPsmf($psmfCompany);
                return $this->redirect(['index']);
            }

         elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);
        }
        return $this->render('create', ['model' => $model]);
    }

/**
* Updates an existing PsmfSection model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($id)
{
$model = $this->findModel($id);

if ($model->load($_POST) && $model->save()) {
return $this->redirect(Url::previous());
} else {
return $this->render('update', [
'model' => $model,
]);
}
}

/**
* Deletes an existing PsmfSection model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
$this->findModel($id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the PsmfSection model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return PsmfSection the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = PsmfSection::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}

    private function getNewPsmfCompanyRow ()
    {
        $psmfCompanyModel = new PsmfCompany;

        $LoggedInUser = \Yii::$app->user->identity;
        $psmfCompanyModel->company_id = $LoggedInUser->company_id;
        $psmfCompanyModel->version = $psmfCompanyModel->getNewVersion();

        if (!$psmfCompanyModel->save())
        {
            return 0;
        }
        return $psmfCompanyModel;
    }

    private function uploadImages ($model,$psmfCompany)
    {
        $model->imageFiles = UploadedFile::getInstances($model, 'imageFiles');
        $model->psmf_id = $psmfCompany->psmf_id;
        $model->section_name = 'images_url';

        return $model->upload();
    }

    private function  exportHtmlPsmf ($psmfCompanyModel)
    {
        $this->layout = false;

        $psmfFileHtml = $this->render('export-html-psmf',['psmfCompanyModel' => $psmfCompanyModel]);

        $bucket = \Yii::$app->fileStorage->getBucket('psmfHtml');

        $fileName = 'psmfId_'.$psmfCompanyModel->psmf_id.'_'.strtotime("now").'.html';
        $bucket->saveFileContent($fileName,$psmfFileHtml);

        $fileUrl = $bucket->getFileUrl($fileName);

        $psmfCompanyModel->file_url = $fileUrl;
        $psmfCompanyModel->save();
    }
}
